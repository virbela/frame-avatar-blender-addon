This document is Mikaels notes outlining the work that is to be done to the branch feature-rfs-001

	Pending features in order of presentation (based on meeting with Eric 2021-11-23)

		* Automated baking of eye color data.

			This will be accomplished by having diffuse textures for the eyes. (se FF2)

		* Baking AO only morphs to monochrome channels (see FF1)

		* Adding color channel to UV-transform metadata (FF4)

		* Update frame to handle the new exports (See rfs-001 feature of frame).

		* Make hand painting accessible for artists (FF5)
			(this is similar to using the eye textures but here we are painting inside of blender)

		* Implement full production ready atlas with eyes and painted morphs
			This will require all sub features to work together.


	Features categorized by function

		FF1		Allocating UV islands to grayscale or color target.
		FF2		Allowing allocating multiple targets (eyes have multiple colors, we may want different faces or different textures on clothes).
		FF3		Configuring the target textures based on final atlas size and percentage of Y space.

					(See channel_packing.svg for details).

		FF4		Post processing step of export and texture stitching

		FF5		GUI features to make sure the workflow is guided enough for artists without deep technical skills to be able to use it.
				This includes having things partitioned either in order of operation (wizard mode) or to put the more advanced and seldom to change settings
				in a specific panel.

				Sub features here include to switch to texture painting context, hide or show objects and so forth.

		FF6		Some morphs should be baked together, we could call this bake groups.

		FF7		Button for operations to fix improper normals in the mesh

	Improvements to addon

		When creating bake targets we should not need need to remove the entire collection.
		Only changed items should be updated.
		We need to define here though what information we overwrite and what information we do not overwrite.

		Textures should be named in a way where we can reconnect them to shape keys if they are removed from the target collection.


	Technical details

		For custom data storage classes in a blender context it makes the most sense to use derivates of bpy.types.PropertyGroup to make sure blender properly saves our state

	Extra thoughts

		Multiple atlas targets
			In the future we may want more tha one target atlas, especially if we are baking multiple passes with different resolutions.
			Since this is outside of the scope of this task there is no need to implement all this but I do think it is a good idea
			to at least have things prepared for it. That things is properly split up by concerns.

			If we have a class that represents a target atlas we don't need to do much changes to add more of these.
			But the initial implementation is hard coding the instanciation of the one target and we use it as a singleton for now.

		Option for automatic normal correction at the appropriate stage (see FF7)


	Useful references
		Properties
			https://docs.blender.org/api/current/bpy.props.html

		Image editing
			https://docs.blender.org/api/blender_python_api_2_71_release/bpy.types.Image.html
			https://blender.stackexchange.com/questions/13422/crop-image-with-python-script/13516#13516
			https://blender.stackexchange.com/questions/3673/why-is-accessing-image-data-so-slow/3678#3678

		Blender path handling
			https://blender.stackexchange.com/questions/180092/how-to-read-the-contents-of-a-text-file

		Arrange nodes
			https://blender.stackexchange.com/questions/41461/automatic-node-distribution-and-alignment

		Blender class naming convention
			https://blender.stackexchange.com/a/124747

		Blender handling of when manipulating collectionproperties
			https://docs.blender.org/api/current/info_gotcha.html?highlight=collectionproperty#help-my-script-crashes-blender



	Scattered Notes
		Blender has Numpy built in but since we are not really doing any mathematical image operations it may not be all that helpful


	Current plan


		DONE		Texture stitching
		SKIP		Mock data for export
		PEND		Frame implementation
		DONE		Partitioning of equal sums
		PEND		GUI implementation - data access



	Branches

		teams rooms		 	ssf-00x
							ssf-00y



	Notes

		bpy.data.scenes["Scene"].uvp2_props.tex_ratio


		morph target data
			uv mode
				target channel
					diffuse color layer					__TakesColor					https://github.com/virbela/frame-avatar-blender-addon/blob/feature-ssf-000/sources/modules/create_bake_targets.py#L21
					gray scale layer													https://github.com/virbela/frame-avatar-blender-addon/blob/feature-ssf-000/sources/modules/create_bake_targets.py#L17
				fixed (static)
				only corner pixel						__None							https://github.com/virbela/frame-avatar-blender-addon/blob/feature-ssf-000/sources/modules/create_bake_targets.py#L13

			variant count								__Variants_{count}				https://github.com/virbela/frame-avatar-blender-addon/blob/feature-ssf-000/sources/modules/create_bake_targets.py#L43
				example: eyes for instance

			priority





	About class registration
		https://wiki.blender.org/wiki/Reference/Release_Notes/2.80/Python_API/Addons#Class_Registration

		Note: subclasses of [Header, Menu, Operator, Panel, UIList] remain accessible from bpy.types
			This means we want to prefix everything with FRAME_ to not risk namespace collisions

		In many cases bl_idname can be omitted and it will be based on class name.
		In some cases though, this does not apply and a specific bl_idname is needed.

			TODO: Refer to places in the code where this happens



	Pending notes


		Bake groups:

			We could have a list with defined groups that also includes the (Bake individual) group as a group you can't delete.
			Then we have a different list with all the targets and one can assign them to various groups, similar to how the vertex grouping box works.
