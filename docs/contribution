Brief
	This document is intended to be a place to document weird, surprising or non intuative aspects of this code base.
	In order to refer to specific items here we will assign each entry here with a cardinal number and refer to them as "Contribution note 123"
	These will be under the sub heading 'Specific articles' where 'Generic articles' will have non numbered notes regarding the code base as a whole.

Rationale
	Figuring out surprising or odd behavior is one of the more frustrating and time consuming aspects of programming.
	This is a simple way to prevent the bulk of those situations from occuring more than once.
	It is importat to reference to these articles in the codebase so that the developer know to look here in the first place.


Generic articles

	Pending decisions or todos

		The make targets list-actions-short and list-actions will list items matching '#word' where word is in UPPER CASE.
		Any things that needs further consideration should be tagged with the appropriate tag, for instance TODO, DECISION, BUG or what have out.
		Notice that the # is omitted for the above examples to avoid being listed when running make.


Specific articles

	1	Property descriptions

		For defining a multiline explanation we can use automatic string concatenation of consecutive string literals¹.
		Notice that blender will add a period to the end of the description. This means we should not have any trailing
		newlines '\n' or periods '.' on the final string.

		References:
			¹	https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation


	2	Homeomorphic tool state

		We get the homeomorphic tool state using the following pattern:

			if HT := get_homeomorphic_tool_state(context):	#contribution note 2
				...

		If there is a problem retrieving the tool state an error will automatically be written to the log and we only need to concern ourselves with
		using the tool state if we got it or otherwise abort.

	3	Operators

		Operators should be using the following pattern

			if HT := get_homeomorphic_tool_state(context):	#contribution note 2
				...
				return {'FINISHED'}
			else:
				return {'CANCELLED'}


		This makes it so that the undo buffer is only touched if the operator succeeds¹.
		We may want to adjust this pattern down the line for better exception handling.

		References:
			¹	https://docs.blender.org/api/current/bpy.types.Operator.html#bpy.types.Operator.execute

	4	Bake Exceptions

		We should ensure that bake exceptions occurs BEFORE any actions have been take so that we bail out before modifying anything.
		Other exceptions we don't have control of so we will propagate the exception.
		But since we know that bake exceptions will not mess up the state of the blend file, we can safely return {'CANCELLED'} if those occur.

	5	Internal error

		These should be raised when we detect a programming error or an invalid state that shouldn't have any reason to be invalid.

	6	Registering classes automatically
		A	Using decorator
			This use case is for when we define a concrete class

			example:
				@register_class		#contribution note 6A
				class SomeClass(bpy.types...)
					...

		B	Using base class
			This use case is for when we define an abstract base class that will be subclassed by concrete classes

			example:
				class some_abstract_class(bpy.types...):
					#contribution note 6B
					def __init_subclass__(cls):
						pending_classes.append(cls)

				class some_concrete_class(some_abstract_class):
					...

			Note that we can't have another abstract class as a subclass of the first without it being registered but this
			should not pose a problem in the current code base

	7 	Read only PointerProperty

		PointerProperty is not mutable.

		https://blenderartists.org/t/custom-pointer-property-is-read-only/1315651/4

	8	Bake target identifier

		We identify the bake target by the object and the shape key. This allows us to rename the bake targets user interface name without disconnecting targets.
		#POTENTIAL-PROBLEM - If we want to have multiple bake targets from the same shape key this will not work, one need to use the variants-feature for that instead.

	9	NodeTree only exists after use_nodes = True